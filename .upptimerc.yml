# Change these first
owner: fsdh-pfds # Your GitHub organization or username, where this repository lives
repo: status-statut # The name of this repository
sites:
  - name: Datahub Home
    url: https://sds.canada.ca
  - name: Production FSDH Portal
    url: https://federal-science-datahub.canada.ca/login

status-website:
  # Add your custom domain name, or remove the `cname` line if you don't have a domain
  # Uncomment the `baseUrl` line if you don't have a custom domain and add your repo name there
  #cname: status-statut.sds.canada.ca 
  baseUrl: /status-statut
  name: "Status-Statut"
  introTitle: "Federal Science DataHub (FSDH) / Plateforme fédérale de données scientifiques (PFDS) "
  introMessage: Status page for FSDH products / Page de statut pour les produits du PFDS
  themeUrl: https://fsdh-pfds.github.io/status-statut/gcds-theme.css
  customHeadHtml: |
    <!-- Icons Font Awesome (to access icons, import Font Awesome) -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" crossorigin="anonymous">
    <!-- GC Design System -->
    <link rel="stylesheet" href="https://cdn.design-system.alpha.canada.ca/@cdssnc/gcds-components@0.32.0/dist/gcds/gcds.css">
    <script type="module" src="https://cdn.design-system.alpha.canada.ca/@cdssnc/gcds-components@0.32.0/dist/gcds/gcds.esm.js"></script>
    <script nomodule src="https://cdn.design-system.alpha.canada.ca/@cdssnc/gcds-components@0.32.0/dist/gcds/gcds.js"></script>

  customBodyHtml: |
    <gcds-header lang="en" lang-href="javascript:void(0)" signature-variant="colour" skip-to-href="#" role="banner" class="hydrated" onclick="toggleLanguage()">
        <gcds-top-nav slot=menu label="Top navigation" alignment=right>
            <gcds-nav-link href=/status-statut/ slot=home>Status-Statut</gcds-nav-link>
            <gcds-nav-link href="https://github.com/fsdh-pfds/status-statut/" slot>GitHub</gcds-nav-link>
        </gcds-top-nav>
    </gcds-header>
  
  js: |
    // Global variable to store the current translation data
    let currentTranslations = {};

    // Loads the translation JSON file for the given language (e.g., "en" or "fr")
    async function loadTranslations(lang) {
        try {
            const response = await fetch(`https://fsdh-pfds.github.io/status-statut/${lang}.json`);
            currentTranslations = await response.json();
            console.log(`${lang} JSON Loaded:`, currentTranslations);
            updateTranslations();
            localStorage.setItem("selectedLang", lang);
        } catch (error) {
            console.error("Error loading JSON file:", error);
        }
    }

    // Iterates over elements with the data-i18n attribute and updates their text
    function updateTranslations() {
        document.querySelectorAll("[data-i18n]").forEach(element => {
            const key = element.getAttribute("data-i18n");
            if (currentTranslations[key]) {
                let text = currentTranslations[key];
                // Loop through all data attributes (except data-i18n) and replace placeholders
                Array.from(element.attributes).forEach(attr => {
                    if (attr.name.startsWith("data-") && attr.name !== "data-i18n") {
                        const variableName = attr.name.slice(5).toUpperCase(); // e.g., data-date → $DATE
                        const regex = new RegExp(`\\$${variableName}`, "g");
                        text = text.replace(regex, attr.value);
                    }
                });
                element.innerText = text;
            }
        });
    }

    // Toggles language by loading the opposite language JSON file and updating all elements with [lang] attributes
    function toggleLanguage() {
        const currentLang = localStorage.getItem("selectedLang") || "en";
        const newLang = currentLang === "en" ? "fr" : "en";
        
        // Optionally update elements with a [lang] attribute
        document.querySelectorAll('[lang]').forEach(element => {
            element.setAttribute("lang", newLang);
        });
        
        loadTranslations(newLang);
    }

    // Insert the custom footer on DOMContentLoaded
    document.addEventListener('DOMContentLoaded', () => {
        const footer = document.querySelector('footer');
        if (footer) {
            footer.insertAdjacentHTML('afterend', '<gcds-footer lang="en" display="compact" contextual-heading="Status-Statut"></gcds-footer>');
        }
    });

    // On page load, check the saved language (default to "en") and load its translations
    document.addEventListener("DOMContentLoaded", () => {
        const savedLang = localStorage.getItem("selectedLang") || "en";
        loadTranslations(savedLang);
    });

    // Use a MutationObserver to update translations when the DOM changes
    document.addEventListener("DOMContentLoaded", () => {
      // Start observing the document body once it's available
      const observer = new MutationObserver((mutations) => {
        mutations.forEach(mutation => {
          if (mutation.addedNodes.length > 0) {
            updateTranslations();
          }
        });
      });

      observer.observe(document.body, { childList: true, subtree: true });
    });


i18n:
  activeIncidents: Active Incidents / Incidents actifs
  allSystemsOperational: <span data-i18n="allSystemsOperational"></span>
  incidentReport: "Incident #$NUMBER report / Rapport d'incident #$NUMBER →"
  activeIncidentSummary: Opened at $DATE with $POSTS posts / Ouvert à $DATE avec des postes $POSTS
  incidentTitle: Incident $NUMBER Details / Détails de l'incident $NUMBER
  incidentDetails: Incident Details / Détails de l'incident
  incidentFixed: Fixed / Fixé
  incidentOngoing: Ongoing / En cours
  incidentOpenedAt: Opened at / Ouvert à
  incidentClosedAt: Closed at / Fermé à
  incidentViewOnGitHub: View and Subscribe on GitHub / Voir et s'abonner sur GitHub
  incidentCommentSummary: Posted at $DATE by $AUTHOR / Posté à $DATE par $AUTHOR
  incidentBack: ← Back to all incidents / Retour à tous les incidents
  pastIncidents: Past Incidents / Incidents passés
  pastIncidentsResolved: Resolved in $MINUTES minutes with $POSTS posts / Résolu en $MINUTES minutes avec les messages $POSTS
  liveStatus: Live Status / Statut en direct
  overallUptime: "Overall uptime / Temps de fonctionnement global: $UPTIME"
  overallUptimeTitle: Overall uptime / Temps de fonctionnement global
  averageResponseTime: "Average response time / Temps de réponse moyen : $TIMEms"
  averageResponseTimeTitle: Average response / Réponse moyenne
  sevelDayResponseTime: 7-day response time / Délai de réponse de 7 jours
  responseTimeMs: Response time (ms) / Temps de réponse (ms)
  up: Up / Opérationnel
  down: Down / En panne
  degraded: Degraded / Détérioré
  loading: Loading / Chargement
  footer: Federal Science DataHub / Plateforme fédérale de données scientifiques 
  pastScheduledMaintenance: Past Scheduled Maintenance / Maintenance programmée passée
  scheduledMaintenance: Scheduled Maintenance / Maintenance programmée
  scheduledMaintenanceSummaryStarted: Started at $DATE for $DURATION minutes / Démarré à $DATE pour $DURATION minutes
  scheduledMaintenanceSummaryStarts: Starts at $DATE for $DURATION minutes / Commence à $DATE pour $DURATION minutes
  startedAt: Started at / Commencé à
  startsAt: Starts at / Commence à
  duration: Duration / Durée
  durationMin: $DURATION minutes
  incidentCompleted: Completed / Complété
  incidentScheduled: Scheduled / Programmé
